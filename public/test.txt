this is testing for CLI upload by web3 storage

import { useEffect, useState } from 'react'
import * as Client from '@web3-storage/w3up-client'
import { toast } from 'react-hot-toast'

const Web3Uploader = () => {
  const [client, setClient] = useState<Client.Client | null>(null)
  const [cid, setCid] = useState<string | null>(null)
  const [uploading, setUploading] = useState<boolean>(false)
  const [email, setEmail] = useState<string>('')
  const [isAuthenticating, setIsAuthenticating] = useState<boolean>(false)
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false)
  const [isInitializing, setIsInitializing] = useState<boolean>(true)
  // Space DID for the shared space
  const spaceDid = 'did:key:z6MkqNSdWTsHLdg45TDDxtsrkrbEod4PdRqrNqHwUaDPV1qp'

  const initializeClient = async () => {
    try {
      const c = await Client.create()
      setClient(c)
      return c
    } catch (error) {
      console.error('Failed to create client:', error)
      toast.error('Failed to initialize Web3.Storage client')
      return null
    }
  }

  const setSpace = async (c: Client.Client) => {
    try {
      await c.setCurrentSpace(spaceDid)
      setClient(c)
      setIsAuthenticated(true)
      setIsInitializing(false)
      return true
    } catch (error) {
      console.error('Failed to set space:', error)
      setIsInitializing(false)
      return false
    }
  }

  useEffect(() => {
    const checkExistingSession = async () => {
      try {
        const c = await initializeClient()
        if (!c) {
          setIsInitializing(false)
          return
        }

        const accounts = c.accounts()
        if (Object.keys(accounts).length > 0) {
          await setSpace(c)
        } else {
          setIsInitializing(false)
        }
      } catch (error) {
        console.error('Session check failed:', error)
        setIsInitializing(false)
      }
    }

    checkExistingSession()
  }, [])

  const isValidEmail = (email: string): email is `${string}@${string}` => {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)
  }

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!email) {
      toast.error('Please enter your email')
      return
    }
    
    if (!isValidEmail(email)) {
      toast.error('Please enter a valid email address')
      return
    }

    if (!client) {
      toast.error('Failed to initialize Web3.Storage client')
      return
    }

    setIsAuthenticating(true)
    try {
      // Authenticate the user with validated email
      await client.login(email as `${string}@${string}`)
      
      // Set the space after successful authentication
      const spaceSet = await setSpace(client)
      if (!spaceSet) {
        throw new Error('Failed to access the shared space. Please make sure you have been granted access.')
      }
      
      toast.success('Successfully authenticated! You can now upload files to the shared space.')
    } catch (error) {
      console.error('Authentication failed:', error)
      toast.error(`Authentication failed: ${error instanceof Error ? error.message : 'Unknown error'}`)
    } finally {
      setIsAuthenticating(false)
    }
  }

  const handleUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files
    if (!files || !files.length) {
      toast.error('Please select at least one file')
      return
    }
    if (!client) {
      toast.error('Web3.Storage client not initialized')
      return
    }

    setUploading(true)
    toast.loading('Uploading files...')

    try {
      console.log('Starting upload of', files.length, 'files')
      const fileArray = Array.from(files)
      console.log('Files to upload:', fileArray)
      
      const rootCid = await client.uploadDirectory(fileArray)
      const cidString = rootCid.toString()
      console.log('Upload successful! CID:', cidString)
      
      setCid(cidString)
      toast.success('Files uploaded successfully!')
    } catch (err) {
      const errorMsg = `Upload failed: ${err instanceof Error ? err.message : String(err)}`
      console.error('Upload error:', errorMsg, err)
      toast.error(errorMsg)
    } finally {
      setUploading(false)
      toast.dismiss()
    }
  }

  if (isInitializing) {
    return (
      <div className="flex justify-center items-center p-8">
        <div className="w-8 h-8 rounded-full border-4 border-blue-500 animate-spin border-t-transparent"></div>
        <span className="ml-3 text-gray-700">Initializing...</span>
      </div>
    )
  }

  if (!isAuthenticated) {
    return (
      <div className="p-6 mx-auto max-w-md bg-white rounded-xl shadow-md">
        <h2 className="mb-4 text-xl font-semibold">Web3.Storage Authentication</h2>
        <p className="mb-4 text-gray-600">Please sign in with your email to upload files to IPFS via Web3.Storage</p>
        
        <form onSubmit={handleLogin} className="space-y-4">
          <div>
            <label htmlFor="email" className="block mb-1 text-sm font-medium text-gray-700">
              Email Address
            </label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="p-2 w-full rounded-md border focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="your@email.com"
              disabled={isAuthenticating}
              required
            />
          </div>
          
          <button
            type="submit"
            disabled={isAuthenticating}
            className={`w-full py-2 px-4 rounded-md text-white font-medium ${
              isAuthenticating 
                ? 'bg-blue-400 cursor-not-allowed' 
                : 'bg-blue-600 hover:bg-blue-700'
            }`}
          >
            {isAuthenticating ? 'Sending login email...' : 'Sign In with Email'}
          </button>
        </form>
        
        <p className="mt-4 text-sm text-gray-500">
          Don't have an account? Enter your email above to create one.
        </p>
      </div>
    )
  }

  return (
    <div className="p-4 space-y-4 w-full max-w-2xl rounded border">
      <div className="flex justify-between items-center">
        <h2 className="text-lg font-semibold">Upload to IPFS</h2>
        <button
          onClick={() => {
            setIsAuthenticated(false)
            setEmail('')
          }}
          className="text-sm text-blue-600 hover:text-blue-800"
        >
          Sign Out
        </button>
      </div>
      
      <div className="p-8 text-center rounded-lg border-2 border-gray-300 border-dashed">
        <input
          type="file"
          id="file-upload"
          multiple
          onChange={handleUpload}
          className="hidden"
          disabled={uploading}
        />
        <label
          htmlFor="file-upload"
          className={`cursor-pointer flex flex-col items-center justify-center space-y-2 ${
            uploading ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-50'
          } p-4 rounded-md transition-colors`}
        >
          <svg
            className="mx-auto w-12 h-12 text-gray-400"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"
            />
          </svg>
          <p className="text-lg font-medium text-gray-700">
            {uploading ? 'Uploading...' : 'Drag and drop files here or click to browse'}
          </p>
          <p className="text-sm text-gray-500">
            {uploading ? 'Please wait while we upload your files' : 'Upload any file type up to 32GB'}
          </p>
        </label>
      </div>

      {uploading && (
        <div className="p-4 mt-4 bg-blue-50 rounded-md">
          <div className="flex items-center">
            <div className="mr-3 w-5 h-5 rounded-full border-b-2 border-blue-600 animate-spin"></div>
            <span className="text-blue-700">Uploading to Web3.Storage...</span>
          </div>
        </div>
      )}

      {cid && (
        <div className="p-4 mt-6 bg-green-50 rounded-md">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="w-5 h-5 text-green-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <h3 className="text-sm font-medium text-green-800">Upload Successful!</h3>
              <div className="mt-2 text-sm text-green-700">
                <p>Your files have been uploaded to IPFS.</p>
                <div className="overflow-x-auto p-2 mt-2 bg-white rounded border border-green-200">
                  <code className="text-xs break-all">{cid}</code>
                </div>
                <a
                  href={`https://dweb.link/ipfs/${cid}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="inline-flex items-center mt-2 text-sm font-medium text-green-700 hover:text-green-600"
                >
                  View on IPFS
                  <svg className="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                  </svg>
                </a>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default Web3Uploader
